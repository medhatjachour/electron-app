import { useState } from 'react'
import { Plus, Search, Filter, Upload, Download, Barcode, Image as ImageIcon, X, Edit2, Trash2, Eye } from 'lucide-react'
import Modal from '../components/ui/Modal'
import ProductForm from '../components/ProductForm'

type ProductVariant = {
  id: string
  optionName: string // e.g., "Color", "Size"
  optionValue: string // e.g., "Red", "Large"
  sku: string
  price: number
  stock: number
}

type Product = {
  id: string
  name: string
  baseSKU: string
  category: string
  description: string
  basePrice: number
  baseCost: number
  images: string[]
  hasVariants: boolean
  variants: ProductVariant[]
  totalStock: number
}

type FormErrors = {
  name?: string
  baseSKU?: string
  category?: string
  basePrice?: string
  baseCost?: string
  images?: string
}

export default function Products(): JSX.Element {
  const [products, setProducts] = useState<Product[]>([
    { 
      id: '1', 
      name: 'Running Shoes', 
      baseSKU: 'SHOE-001', 
      category: 'Footwear', 
      description: 'Premium running shoes with excellent cushioning',
      basePrice: 89.99, 
      baseCost: 45, 
      images: [],
      hasVariants: true,
      variants: [
        { id: 'v1', optionName: 'Color-Size', optionValue: 'Black-US 9', sku: 'SHOE-001-BLK-9', price: 89.99, stock: 15 },
        { id: 'v2', optionName: 'Color-Size', optionValue: 'Black-US 10', sku: 'SHOE-001-BLK-10', price: 89.99, stock: 12 },
        { id: 'v3', optionName: 'Color-Size', optionValue: 'White-US 9', sku: 'SHOE-001-WHT-9', price: 89.99, stock: 8 },
        { id: 'v4', optionName: 'Color-Size', optionValue: 'White-US 10', sku: 'SHOE-001-WHT-10', price: 89.99, stock: 10 },
      ],
      totalStock: 45
    },
    { 
      id: '2', 
      name: 'Laptop Pro 15"', 
      baseSKU: 'LAP-002', 
      category: 'Electronics', 
      description: 'High-performance laptop for professionals',
      basePrice: 1299.99, 
      baseCost: 850, 
      images: [],
      hasVariants: true,
      variants: [
        { id: 'v5', optionName: 'RAM-Storage', optionValue: '16GB-512GB', sku: 'LAP-002-16-512', price: 1299.99, stock: 5 },
        { id: 'v6', optionName: 'RAM-Storage', optionValue: '16GB-1TB', sku: 'LAP-002-16-1TB', price: 1499.99, stock: 3 },
        { id: 'v7', optionName: 'RAM-Storage', optionValue: '32GB-1TB', sku: 'LAP-002-32-1TB', price: 1799.99, stock: 2 },
      ],
      totalStock: 10
    },
    { 
      id: '3', 
      name: 'USB-C Cable', 
      baseSKU: 'ACC-003', 
      category: 'Accessories', 
      description: 'Fast charging USB-C cable',
      basePrice: 12.99, 
      baseCost: 5, 
      images: [],
      hasVariants: false,
      variants: [],
      totalStock: 120
    },
  ])
  
  const [showAddModal, setShowAddModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [showViewModal, setShowViewModal] = useState(false)
  const [showImportModal, setShowImportModal] = useState(false)
  const [showScanModal, setShowScanModal] = useState(false)
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [errors, setErrors] = useState<FormErrors>({})
  
  const [formData, setFormData] = useState({
    name: '',
    baseSKU: '',
    category: '',
    description: '',
    basePrice: 0,
    baseCost: 0,
    images: [] as string[],
    hasVariants: false,
    variants: [] as ProductVariant[]
  })

  const [newVariant, setNewVariant] = useState({
    optionName: '',
    optionValue: '',
    sku: '',
    price: 0,
    stock: 0
  })

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {}
    
    if (!formData.name.trim()) {
      newErrors.name = 'Product name is required'
    }
    
    if (!formData.baseSKU.trim()) {
      newErrors.baseSKU = 'SKU is required'
    } else if (!/^[A-Z0-9-]+$/.test(formData.baseSKU)) {
      newErrors.baseSKU = 'SKU must contain only uppercase letters, numbers, and hyphens'
    }
    
    if (!formData.category) {
      newErrors.category = 'Category is required'
    }
    
    if (formData.basePrice <= 0) {
      newErrors.basePrice = 'Price must be greater than 0'
    }
    
    if (formData.baseCost <= 0) {
      newErrors.baseCost = 'Cost must be greater than 0'
    }
    
    if (formData.baseCost >= formData.basePrice) {
      newErrors.baseCost = 'Cost must be less than price'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleAddProduct = () => {
    if (!validateForm()) return

    const totalStock = formData.hasVariants 
      ? formData.variants.reduce((sum, v) => sum + v.stock, 0)
      : 0

    const product: Product = {
      id: (products.length + 1).toString(),
      ...formData,
      totalStock
    }
    
    setProducts([...products, product])
    setShowAddModal(false)
    resetForm()
  }

  const handleEditProduct = () => {
    if (!validateForm() || !selectedProduct) return

    const totalStock = formData.hasVariants 
      ? formData.variants.reduce((sum, v) => sum + v.stock, 0)
      : 0

    setProducts(products.map(p => 
      p.id === selectedProduct.id 
        ? { ...formData, id: p.id, totalStock } 
        : p
    ))
    setShowEditModal(false)
    resetForm()
  }

  const handleDeleteProduct = (id: string) => {
    if (confirm('Are you sure you want to delete this product? This action cannot be undone.')) {
      setProducts(products.filter(p => p.id !== id))
    }
  }

  const resetForm = () => {
    setFormData({
      name: '',
      baseSKU: '',
      category: '',
      description: '',
      basePrice: 0,
      baseCost: 0,
      images: [],
      hasVariants: false,
      variants: []
    })
    setNewVariant({ optionName: '', optionValue: '', sku: '', price: 0, stock: 0 })
    setErrors({})
    setSelectedProduct(null)
  }

  const openEditModal = (product: Product) => {
    setSelectedProduct(product)
    setFormData({
      name: product.name,
      baseSKU: product.baseSKU,
      category: product.category,
      description: product.description,
      basePrice: product.basePrice,
      baseCost: product.baseCost,
      images: product.images,
      hasVariants: product.hasVariants,
      variants: product.variants
    })
    setShowEditModal(true)
  }

  const openViewModal = (product: Product) => {
    setSelectedProduct(product)
    setShowViewModal(true)
  }

  const addVariant = () => {
    if (!newVariant.optionValue || !newVariant.sku || newVariant.price <= 0) {
      alert('Please fill all variant fields correctly')
      return
    }

    const variant: ProductVariant = {
      id: `v${Date.now()}`,
      ...newVariant
    }

    setFormData({
      ...formData,
      variants: [...formData.variants, variant]
    })

    setNewVariant({ optionName: '', optionValue: '', sku: '', price: 0, stock: 0 })
  }

  const removeVariant = (id: string) => {
    setFormData({
      ...formData,
      variants: formData.variants.filter(v => v.id !== id)
    })
  }

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (files) {
      const newImages: string[] = []
      Array.from(files).forEach(file => {
        const reader = new FileReader()
        reader.onload = (event) => {
          if (event.target?.result) {
            newImages.push(event.target.result as string)
            if (newImages.length === files.length) {
              setFormData({
                ...formData,
                images: [...formData.images, ...newImages]
              })
            }
          }
        }
        reader.readAsDataURL(file)
      })
    }
  }

  const removeImage = (index: number) => {
    setFormData({
      ...formData,
      images: formData.images.filter((_, i) => i !== index)
    })
  }

  const handleExport = () => {
    const csv = [
      ['ID', 'Name', 'SKU', 'Category', 'Price', 'Cost', 'Stock', 'Variants'],
      ...products.map(p => [
        p.id, 
        p.name, 
        p.baseSKU, 
        p.category, 
        p.basePrice, 
        p.baseCost, 
        p.totalStock,
        p.variants.length
      ])
    ].map(row => row.join(',')).join('\n')
    
    const blob = new Blob([csv], { type: 'text/csv' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'products.csv'
    a.click()
  }

  const filteredProducts = products.filter(p =>
    p.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    p.baseSKU.toLowerCase().includes(searchQuery.toLowerCase()) ||
    p.category.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-slate-900 dark:text-white">Product Management</h1>
          <p className="text-slate-600 dark:text-slate-400 mt-1">Manage your product catalog</p>
        </div>
        <div className="flex gap-3">
          <button 
            onClick={() => setShowImportModal(true)}
            className="btn-secondary flex items-center gap-2"
          >
            <Upload size={20} />
            Import
          </button>
          <button 
            onClick={handleExport}
            className="btn-secondary flex items-center gap-2"
          >
            <Download size={20} />
            Export
          </button>
          <button 
            onClick={() => setShowAddModal(true)}
            className="btn-primary flex items-center gap-2"
          >
            <Plus size={20} />
            Add Product
          </button>
        </div>
      </div>

      <div className="glass-card p-4">
        <div className="flex gap-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-slate-400" size={20} />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search products by name, SKU, or category..."
              className="input-field pl-10 w-full"
            />
          </div>
          <button className="btn-secondary flex items-center gap-2">
            <Filter size={20} />
            Filters
          </button>
          <button 
            onClick={() => setShowScanModal(true)}
            className="btn-secondary flex items-center gap-2"
          >
            <Barcode size={20} />
            Scan
          </button>
        </div>
      </div>

      <div className="glass-card overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-slate-100 dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700">
              <tr>
                <th className="px-6 py-4 text-left text-sm font-semibold text-slate-900 dark:text-white">Image</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-slate-900 dark:text-white">Product</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-slate-900 dark:text-white">SKU</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-slate-900 dark:text-white">Category</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-slate-900 dark:text-white">Price</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-slate-900 dark:text-white">Variants</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-slate-900 dark:text-white">Stock</th>
                <th className="px-6 py-4 text-left text-sm font-semibold text-slate-900 dark:text-white">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-slate-200 dark:divide-slate-700">
              {filteredProducts.map((product) => (
                <tr key={product.id} className="hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors">
                  <td className="px-6 py-4">
                    <div className="w-16 h-16 rounded-lg bg-gradient-to-br from-primary/10 to-secondary/10 flex items-center justify-center overflow-hidden">
                      {product.images.length > 0 ? (
                        <img src={product.images[0]} alt={product.name} className="w-full h-full object-cover" />
                      ) : (
                        <ImageIcon size={24} className="text-slate-400" />
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="font-semibold text-slate-900 dark:text-white">{product.name}</div>
                    <div className="text-xs text-slate-500 dark:text-slate-400 mt-1">{product.description.substring(0, 50)}...</div>
                  </td>
                  <td className="px-6 py-4">
                    <span className="font-mono text-sm text-slate-600 dark:text-slate-400">{product.baseSKU}</span>
                  </td>
                  <td className="px-6 py-4">
                    <span className="px-3 py-1 rounded-full bg-primary/10 text-primary text-sm font-medium">{product.category}</span>
                  </td>
                  <td className="px-6 py-4 font-bold text-slate-900 dark:text-white">${product.basePrice.toFixed(2)}</td>
                  <td className="px-6 py-4">
                    {product.hasVariants ? (
                      <div className="flex items-center gap-1">
                        <span className="px-2 py-1 bg-secondary/10 text-secondary text-xs font-semibold rounded">
                          {product.variants.length} variants
                        </span>
                      </div>
                    ) : (
                      <span className="text-slate-400 text-sm">Simple</span>
                    )}
                  </td>
                  <td className="px-6 py-4">
                    <span className={`px-3 py-1 rounded-full text-sm font-semibold ${
                      product.totalStock < 10 ? 'bg-error/10 text-error' : 'bg-success/10 text-success'
                    }`}>
                      {product.totalStock}
                    </span>
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex items-center gap-2">
                      <button
                        onClick={() => openViewModal(product)}
                        className="p-2 hover:bg-primary/10 text-primary rounded-lg transition-colors"
                        title="View details"
                      >
                        <Eye size={18} />
                      </button>
                      <button
                        onClick={() => openEditModal(product)}
                        className="p-2 hover:bg-secondary/10 text-secondary rounded-lg transition-colors"
                        title="Edit product"
                      >
                        <Edit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleDeleteProduct(product.id)}
                        className="p-2 hover:bg-error/10 text-error rounded-lg transition-colors"
                        title="Delete product"
                      >
                        <Trash2 size={18} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Add Product Modal */}
      <Modal isOpen={showAddModal} onClose={() => { setShowAddModal(false); resetForm(); }} title="Add New Product" size="xl">
        <div className="space-y-4">
          <ProductForm
            formData={formData}
            setFormData={setFormData}
            errors={errors}
            onImageUpload={handleImageUpload}
            onRemoveImage={removeImage}
            newVariant={newVariant}
            setNewVariant={setNewVariant}
            onAddVariant={addVariant}
            onRemoveVariant={removeVariant}
          />
          <div className="flex gap-3 pt-4 border-t border-slate-200 dark:border-slate-700">
            <button onClick={handleAddProduct} className="btn-primary flex-1">
              Add Product
            </button>
            <button onClick={() => { setShowAddModal(false); resetForm(); }} className="btn-secondary flex-1">
              Cancel
            </button>
          </div>
        </div>
      </Modal>

      {/* Edit Product Modal */}
      <Modal isOpen={showEditModal} onClose={() => { setShowEditModal(false); resetForm(); }} title="Edit Product" size="xl">
        <div className="space-y-4">
          <ProductForm
            formData={formData}
            setFormData={setFormData}
            errors={errors}
            onImageUpload={handleImageUpload}
            onRemoveImage={removeImage}
            newVariant={newVariant}
            setNewVariant={setNewVariant}
            onAddVariant={addVariant}
            onRemoveVariant={removeVariant}
          />
          <div className="flex gap-3 pt-4 border-t border-slate-200 dark:border-slate-700">
            <button onClick={handleEditProduct} className="btn-primary flex-1">
              Save Changes
            </button>
            <button onClick={() => { setShowEditModal(false); resetForm(); }} className="btn-secondary flex-1">
              Cancel
            </button>
          </div>
        </div>
      </Modal>

      {/* View Product Modal */}
      <Modal isOpen={showViewModal} onClose={() => { setShowViewModal(false); setSelectedProduct(null); }} title="Product Details" size="xl">
        {selectedProduct && (
          <div className="space-y-6">
            {/* Images */}
            {selectedProduct.images.length > 0 && (
              <div className="bg-slate-50 dark:bg-slate-800/50 rounded-xl p-4">
                <h4 className="text-sm font-semibold text-slate-700 dark:text-slate-300 mb-3">Product Images</h4>
                <div className="flex gap-3 overflow-x-auto">
                  {selectedProduct.images.map((img, idx) => (
                    <img
                      key={idx}
                      src={img}
                      alt={`Product ${idx + 1}`}
                      className="w-32 h-32 object-cover rounded-lg border-2 border-slate-200 dark:border-slate-700"
                    />
                  ))}
                </div>
              </div>
            )}

            {/* Basic Info */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-semibold text-slate-500 dark:text-slate-400">Product Name</label>
                <p className="text-lg font-semibold text-slate-900 dark:text-white mt-1">{selectedProduct.name}</p>
              </div>
              <div>
                <label className="text-sm font-semibold text-slate-500 dark:text-slate-400">Base SKU</label>
                <p className="text-lg font-mono font-semibold text-slate-900 dark:text-white mt-1">{selectedProduct.baseSKU}</p>
              </div>
              <div>
                <label className="text-sm font-semibold text-slate-500 dark:text-slate-400">Category</label>
                <span className="inline-block mt-1 px-3 py-1 bg-primary/10 text-primary rounded-full text-sm font-semibold">
                  {selectedProduct.category}
                </span>
              </div>
              <div>
                <label className="text-sm font-semibold text-slate-500 dark:text-slate-400">Base Price</label>
                <p className="text-lg font-semibold text-slate-900 dark:text-white mt-1">${selectedProduct.basePrice.toFixed(2)}</p>
              </div>
            </div>

            {/* Description */}
            {selectedProduct.description && (
              <div>
                <label className="text-sm font-semibold text-slate-500 dark:text-slate-400">Description</label>
                <p className="text-slate-700 dark:text-slate-300 mt-2 leading-relaxed">{selectedProduct.description}</p>
              </div>
            )}

            {/* Variants */}
            {selectedProduct.hasVariants && selectedProduct.variants.length > 0 && (
              <div>
                <h4 className="text-sm font-semibold text-slate-700 dark:text-slate-300 mb-3">Product Variants</h4>
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b border-slate-200 dark:border-slate-700">
                        <th className="text-left text-xs font-semibold text-slate-600 dark:text-slate-400 pb-2 pr-4">Option</th>
                        <th className="text-left text-xs font-semibold text-slate-600 dark:text-slate-400 pb-2 pr-4">SKU</th>
                        <th className="text-left text-xs font-semibold text-slate-600 dark:text-slate-400 pb-2 pr-4">Price</th>
                        <th className="text-left text-xs font-semibold text-slate-600 dark:text-slate-400 pb-2">Stock</th>
                      </tr>
                    </thead>
                    <tbody>
                      {selectedProduct.variants.map((variant) => (
                        <tr key={variant.id} className="border-b border-slate-100 dark:border-slate-800">
                          <td className="py-3 pr-4">
                            <span className="inline-block px-2 py-1 bg-secondary/10 text-secondary rounded text-sm font-medium">
                              {variant.optionValue}
                            </span>
                          </td>
                          <td className="py-3 pr-4 font-mono text-sm text-slate-700 dark:text-slate-300">{variant.sku}</td>
                          <td className="py-3 pr-4 font-semibold text-slate-900 dark:text-white">${variant.price.toFixed(2)}</td>
                          <td className="py-3">
                            <span className={`inline-block px-2 py-1 rounded text-sm font-semibold ${
                              variant.stock < 10 ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400' : 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'
                            }`}>
                              {variant.stock} in stock
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                <div className="mt-4 p-4 bg-primary/5 border border-primary/20 rounded-lg">
                  <p className="text-sm font-semibold text-slate-900 dark:text-white">
                    Total Stock: <span className="text-primary">{selectedProduct.totalStock} units</span>
                  </p>
                </div>
              </div>
            )}

            {/* Simple Product Stock */}
            {!selectedProduct.hasVariants && (
              <div className="p-4 bg-primary/5 border border-primary/20 rounded-lg">
                <p className="text-sm font-semibold text-slate-900 dark:text-white">
                  Stock: <span className={`${selectedProduct.totalStock < 10 ? 'text-red-600' : 'text-green-600'}`}>
                    {selectedProduct.totalStock} units
                  </span>
                </p>
              </div>
            )}
          </div>
        )}
      </Modal>

      {/* Import Modal */}
      <Modal isOpen={showImportModal} onClose={() => setShowImportModal(false)} title="Import Products">
        <div className="space-y-4">
          <div className="border-2 border-dashed border-slate-300 dark:border-slate-600 rounded-xl p-8 text-center">
            <Upload size={48} className="mx-auto text-slate-400 mb-4" />
            <p className="text-lg font-semibold text-slate-900 dark:text-white mb-2">
              Upload CSV File
            </p>
            <p className="text-sm text-slate-600 dark:text-slate-400 mb-4">
              Drag and drop your CSV file here, or click to browse
            </p>
            <input
              type="file"
              accept=".csv"
              className="hidden"
              id="csv-upload"
              onChange={(e) => {
                const file = e.target.files?.[0]
                if (file) {
                  alert(`File selected: ${file.name}. Import functionality coming soon!`)
                }
              }}
            />
            <label htmlFor="csv-upload" className="btn-primary inline-flex items-center gap-2 cursor-pointer">
              <Upload size={20} />
              Choose File
            </label>
          </div>
          <div className="bg-primary/5 border border-primary/20 rounded-lg p-4">
            <p className="text-sm font-semibold text-slate-900 dark:text-white mb-2">CSV Format:</p>
            <p className="text-xs text-slate-600 dark:text-slate-400 font-mono">
              Name, SKU, Category, Price, Cost, Stock
            </p>
          </div>
        </div>
      </Modal>

      {/* Scan Barcode Modal */}
      <Modal isOpen={showScanModal} onClose={() => setShowScanModal(false)} title="Scan Barcode">
        <div className="space-y-4">
          <div className="bg-slate-900 rounded-xl p-8 aspect-video flex items-center justify-center">
            <div className="text-center">
              <Barcode size={64} className="mx-auto text-primary mb-4" />
              <p className="text-white font-semibold mb-2">Camera Preview</p>
              <p className="text-slate-400 text-sm">Barcode scanner will appear here</p>
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
              Or enter barcode manually:
            </label>
            <input
              type="text"
              className="input-field w-full"
              placeholder="Enter barcode number"
            />
          </div>
          <button className="btn-primary w-full">
            Search Product
          </button>
        </div>
      </Modal>
    </div>
  )
}
