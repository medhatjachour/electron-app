generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  passwordHash String
  role         String        @default("sales") // Changed from enum to String
  sales        Sale[]
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@index([role])
  @@index([createdAt])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  icon        String?   // Optional: emoji or icon name
  color       String?   // Optional: hex color for UI
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([name])
}

model Product {
  id          String           @id @default(uuid())
  name        String
  baseSKU     String           @unique
  categoryId  String
  category    Category         @relation(fields: [categoryId], references: [id])
  description String?
  basePrice   Float
  baseCost    Float
  hasVariants Boolean          @default(false)
  storeId     String?          // Optional: Products can be assigned to specific stores
  store       Store?           @relation(fields: [storeId], references: [id])
  images      ProductImage[]
  variants    ProductVariant[]
  sales       Sale[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Single-column indexes
  @@index([createdAt])
  @@index([categoryId])
  @@index([storeId])
  @@index([name])
  @@index([baseSKU])
  
  // Composite indexes for common query patterns
  @@index([categoryId, createdAt])
  @@index([name, categoryId])
  @@index([hasVariants, categoryId])
  @@index([basePrice, categoryId])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  imageData String   // Base64 encoded image
  order     Int      @default(0)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@index([productId])
  @@index([order])
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  color     String?
  size      String?
  sku       String   @unique
  price     Float
  stock     Int      @default(0)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Single-column indexes
  @@index([productId])
  @@index([stock])
  @@index([sku])
  @@index([price])
  
  // Composite indexes for filtering and analytics
  @@index([productId, stock])
  @@index([productId, price])
  @@index([stock, price])
  @@index([color, size, stock])
}

model Sale {
  id          String   @id @default(uuid())
  productId   String
  variantId   String?  // Optional: which variant was sold
  userId      String
  quantity    Int
  price       Float    // Price per item at time of sale
  total       Float    // Total = price * quantity
  paymentMethod String @default("cash") // cash or card
  status      String   @default("completed") // completed, pending, refunded
  customerName String? // Optional customer name
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Single-column indexes
  @@index([createdAt])
  @@index([userId])
  @@index([productId])
  @@index([status])
  @@index([paymentMethod])
  
  // Composite indexes for analytics and reporting
  @@index([createdAt, status])
  @@index([userId, createdAt])
  @@index([productId, createdAt])
  @@index([paymentMethod, createdAt])
  @@index([status, paymentMethod])
}

model Transaction {
  id          String   @id @default(uuid())
  type        String   // Changed from enum to String ("income" or "expense")
  amount      Float
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model Store {
  id        String    @id @default(uuid())
  name      String
  location  String
  phone     String
  hours     String
  manager   String
  status    String    @default("active") // active or inactive
  products  Product[] // Products assigned to this store
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Employee {
  id          String   @id @default(uuid())
  name        String
  role        String
  email       String   @unique
  phone       String
  performance Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  phone       String
  loyaltyTier String   @default("Bronze")
  totalSpent  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([email])
  @@index([phone])
  @@index([loyaltyTier])
}
